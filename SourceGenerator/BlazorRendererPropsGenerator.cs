using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGenerator;

[Generator]
public class BlazorRendererPropsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var razorFiles = context.AdditionalTextsProvider
            .Where(file => file.Path.EndsWith(".razor", StringComparison.OrdinalIgnoreCase));

        var classNoteProvider = razorFiles
            .Select((file, cancellationToken) =>
            {
                var text = file.GetText(cancellationToken);
                var content = text is null ? string.Empty : text.ToString();

                var className = Path.GetFileNameWithoutExtension(file.Path);
                var fullClass = ExtractAndWrapCodeBlocks(content, className);

                var tree = CSharpSyntaxTree.ParseText(fullClass);
                var root = tree.GetRoot();

                var classNode = root.DescendantNodes().OfType<ClassDeclarationSyntax>().FirstOrDefault() ?? SyntaxFactory.ClassDeclaration(className);
                return classNode;
            });
        context.RegisterSourceOutput(classNoteProvider, (spc, classNote) =>
        {
            var className = classNote.Identifier.ToString();
            var properties = classNote.Members
                .OfType<PropertyDeclarationSyntax>()
                .Where(prop =>
                    prop.Modifiers.Any(m => m.IsKind(SyntaxKind.PublicKeyword)) &&
                    prop.AttributeLists
                        .SelectMany(a => a.Attributes)
                        .Any(attr => attr.Name.ToString() == "Parameter" || attr.Name.ToString().EndsWith(".Parameter"))
                )
                .ToList();
            if (properties.Any() == false) return;

            var codeBuilder = new StringBuilder();

            codeBuilder.AppendLine("""
                                   // <auto-generated />
                                   namespace Empty.Components
                                   {
                                   """);

            codeBuilder.AppendLine($$"""
                                         public partial class {{className}}
                                         {
                                             public record Props({{string.Join(", ", properties.Select(x => $"{x.Type.ToString()} {x.Identifier.Text}"))}})
                                             {
                                                 public static implicit operator Dictionary<string, object>(Props props) => new()
                                                 {
                                                     {{string.Join(",\n                ", properties.Select(x => $"[nameof(props.{x.Identifier.Text})] = props.{x.Identifier.Text}"))}}
                                                 };
                                             }
                                         }
                                     """);
            codeBuilder.AppendLine("}");
            spc.AddSource(
                Path.GetFileNameWithoutExtension(className) + "Props.g.cs",
                SourceText.From(codeBuilder.ToString(), Encoding.UTF8)
            );
        });
    }

    private static string ExtractAndWrapCodeBlocks(string razorContent, string className)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"class {className}");
        sb.AppendLine("{");

        var index = 0;

        while (index < razorContent.Length)
        {
            var codeStart = razorContent.IndexOf("@code", index, StringComparison.OrdinalIgnoreCase);
            if (codeStart == -1) break;

            var braceStart = razorContent.IndexOf('{', codeStart);
            if (braceStart == -1) break;

            var braceCount = 0;
            var end = braceStart;

            for (; end < razorContent.Length; end++)
            {
                switch (razorContent[end])
                {
                    case '{':
                        braceCount++;
                        break;
                    case '}':
                        braceCount--;
                        break;
                }

                if (braceCount != 0) continue;
                var inner = razorContent.Substring(braceStart + 1, end - braceStart - 1).Trim();
                sb.AppendLine(inner);
                index = end + 1;
                break;
            }

            if (braceCount != 0) break; // unbalanced, stop parsing
        }

        sb.AppendLine("}");
        return sb.ToString();
    }
}